"use client";

import React, { useState } from 'react';
import TextField from '@mui/material/TextField';
import Button from '@mui/material/Button';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { MobileDateTimePicker } from '@mui/x-date-pickers/MobileDateTimePicker';
import { renderTimeViewClock } from '@mui/x-date-pickers/timeViewRenderers';
import dayjs, { Dayjs } from 'dayjs';
import isLeapYear from 'dayjs/plugin/isLeapYear';

import 'dayjs/locale/en'; // import locale
import type { User } from '@prisma/client';

import { Grid, Paper, Stack } from '@mui/material';
import { MapComponent } from '@/app/map/MapComponent';
import { createEvent } from './createEventAction';

// Map Stuff
import {createRoot} from 'react-dom/client';
import {APIProvider, Map} from '@vis.gl/react-google-maps';

dayjs.extend(isLeapYear) // use plugin
dayjs.locale('en') // use locale

// Should mimick db Event Model
interface EventFormData {
  name: string;
  description: string;
  //location: google.maps.LatLngLiteral;
  location: string;
  startTime: Dayjs;
  endTime: Dayjs;
}

// Passes in db model of User from parent
interface EventFormProps {
    user: User
}


export default function EventForm({ user }: EventFormProps) {
    
    const [formData, setFormData] = useState<EventFormData>({
        name: '',
        description: '',
       // location: { lat: 0, lng: 0 },
       location: "1.000,1.000",
        startTime: dayjs(new Date()),
        endTime: dayjs(new Date()),
    });

    const handleInputChange = (
        event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
    ) => {
        const { name, value } = event.target;
        setFormData((prevData) => ({
        ...prevData,
        [name]: value,
        }));
    };

    const handleLocationChange = (
        event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
    ) => {
        // Assuming the input value is a stringified JSON representation of google.maps.LatLngLiteral
        //const location = JSON.parse(event.target.value);
        const location = event.target.value;
        setFormData((prevData) => ({
        ...prevData,
        location,
        }));
    };

    const handleDateTimeChange = (field: 'startTime' | 'endTime', date: Dayjs | null) => {
        if (date) {
        setFormData((prevData) => ({
            ...prevData,
            [field]: date,
        }));
        }
    };

    const handleSubmit = (event: React.FormEvent) => {
        event.preventDefault();
        console.log(formData);
        //create event
        const newEvent = {
            // id is autogenerated
            //id:Date.now(),
            name: formData.name,
            description: formData.description,
            lat: 0,
            lng: 0,
            owner: 'bje301@gmail.com',
            activity: 'basketball',
            attendance: [1],
            createdAt: new Date(),
            startTime: formData.startTime.toDate(),
            endTime: formData.endTime.toDate()
        }

        createEvent(newEvent);

    };

    return (
        <form onSubmit={handleSubmit}>
        <Grid container spacing={2}>
            
            <Grid item xs={6}>
                    <TextField
                        label="Name"
                        name="name"
                        value={formData.name}
                        onChange={handleInputChange}
                        fullWidth
                        required
                    />
                    <TextField
                        label="Description"
                        name="description"
                        value={formData.description}
                        onChange={handleInputChange}
                        fullWidth
                        required
                    />
                    <TextField
                        label="Location"
                        name="location"
                        value={formData.location}
                        onChange={handleLocationChange}
                        fullWidth
                        required
                    />
                
                <LocalizationProvider dateAdapter={AdapterDayjs}>
                    <MobileDateTimePicker
                        label="Start Time"
                        value={formData.startTime}
                        disablePast
                        formatDensity='spacious'
                        onChange={(date) => handleDateTimeChange('startTime', date)}
                        viewRenderers={{
                            hours: renderTimeViewClock,
                            minutes: renderTimeViewClock,
                            seconds: null,
                        }}                 
                    />
                    <MobileDateTimePicker
                    label="End Time"
                    value={formData.endTime}
                    disablePast
                    formatDensity='spacious'
                    onChange={(date) => handleDateTimeChange('endTime', date)}
                    viewRenderers={{
                        hours: renderTimeViewClock,
                        minutes: renderTimeViewClock,
                        seconds: null,
                    }}
                    />
                </LocalizationProvider>
                <Button type="submit" variant="contained" color="primary">
                    Create Event
                </Button>
            </Grid>
            <Grid item xs={6}>
                <Paper elevation={6}>
                <APIProvider apiKey={process.env.NEXT_PUBLIC_GMAPS_API_KEY as string}>
                    <div style={{height: '100vh', width: '100%'}}>
                    <Map
                    zoom={6}
                    center={{lat: 22.54992, lng: 0}}
                    />
                    </div>
                </APIProvider>
                </Paper>
            </Grid>
            
        </Grid>
        </form>
    );
    
}
