// Basic Config
generator client {
  provider = "prisma-client-js"
}

// Primary database connection settings
// Shadow database is specific for Prisma and next-auth
datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL") // uses connection pooling
  directUrl = env("DIRECT_URL") // uses a direct connection
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// Application Specific tables

model Event {
  id          Int               @id(map: "event_pkey") @default(autoincrement())
  name        String            @db.VarChar(100)
  description String?
  lat         Float
  lng         Float
  owner       String
  attendance  Int[]                @default([])
  activity    String               @db.VarChar(100)
  createdAt   DateTime             @default(now()) @db.Timestamp(6)
  startTime   DateTime             @db.Timetz()
  endTime     DateTime             @db.Timetz()
  User        User                 @relation(fields: [owner], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "owner_fkey")
}


// Next Auth required models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  friends  String[]   @default([])
  city     String? @db.VarChar(255)
  state    String? @db.VarChar(255)
  country  String? @db.VarChar(50)
  eventsCreated Int[] @default([])
  eventsAttended Int[] @default([])
  accounts      Account[]
  sessions      Session[]
  events    Event[]
  homeCenter Float[] @default([39.2654073,-76.5139326])
  }

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}